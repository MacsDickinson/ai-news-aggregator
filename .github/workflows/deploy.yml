name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "20"

jobs:
  # Job 1: Build and Test
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run lint
          npm run type-check
          npm run test
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            backend/dist/
            frontend/build/
            shared/dist/
          retention-days: 1

  # Job 2: Deploy Infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure/terraform

      - name: Terraform Plan
        run: terraform plan -var-file=environments/${{ github.event.inputs.environment || 'staging' }}.tfvars -out=tfplan
        working-directory: ./infrastructure/terraform
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment || 'staging' }}

      - name: Terraform Apply
        run: terraform apply tfplan
        working-directory: ./infrastructure/terraform

      - name: Export Terraform Outputs
        id: terraform-outputs
        run: |
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "aws_region=$(terraform output -raw aws_region)" >> $GITHUB_OUTPUT
        working-directory: ./infrastructure/terraform

    outputs:
      s3_bucket: ${{ steps.terraform-outputs.outputs.s3_bucket }}
      aws_region: ${{ steps.terraform-outputs.outputs.aws_region }}

  # Job 3: Deploy Application
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.deploy-infrastructure.outputs.aws_region }}

      - name: Deploy to S3
        run: |
          echo "Deploying frontend build to S3..."
          aws s3 sync frontend/build/ s3://${{ needs.deploy-infrastructure.outputs.s3_bucket }}/frontend/ --delete
          echo "Uploading backend artifacts..."
          aws s3 sync backend/dist/ s3://${{ needs.deploy-infrastructure.outputs.s3_bucket }}/backend/ --delete

      - name: Invalidate CloudFront (if exists)
        run: |
          echo "CloudFront invalidation will be added when CDN is configured"
        continue-on-error: true

      - name: Deploy Lambda functions
        run: |
          echo "Lambda deployment will be added when functions are configured"
        continue-on-error: true

      - name: Run smoke tests
        run: |
          echo "Smoke tests will be added when endpoints are available"
        continue-on-error: true

  # Job 4: Notify Deployment
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure, deploy-application]
    if: always()

    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.deploy-application.result }}" == "success" ]]; then
            echo "✅ Deployment to ${{ github.event.inputs.environment || 'staging' }} successful!"
            echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
            echo "S3 Bucket: ${{ needs.deploy-infrastructure.outputs.s3_bucket }}"
          else
            echo "❌ Deployment to ${{ github.event.inputs.environment || 'staging' }} failed!"
            exit 1
          fi
